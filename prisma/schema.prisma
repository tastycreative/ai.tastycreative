// prisma/schema.prisma - Updated with dynamic URL approach
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String?
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  influencers InfluencerLoRA[]
  jobs        GenerationJob[]
  images      GeneratedImage[]

  @@map("users")
}

model InfluencerLoRA {
  id               String     @id @default(cuid())
  clerkId          String     // Link to Clerk user
  name             String
  displayName      String
  fileName         String     @unique
  originalFileName String
  fileSize         Int
  uploadedAt       DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  description      String?
  thumbnailUrl     String?
  isActive         Boolean    @default(true)
  usageCount       Int        @default(0)
  comfyUIPath      String?
  syncStatus       SyncStatus @default(PENDING)
  lastUsedAt       DateTime?

  // Relations
  user User @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@map("influencer_loras")
}

model GenerationJob {
  id              String    @id @default(cuid())
  clerkId         String    // Link to Clerk user
  status          JobStatus @default(PENDING)
  progress        Int?      @default(0)
  resultUrls      String[]  @default([]) // Keep for backward compatibility temporarily
  error           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastChecked     DateTime?
  comfyUIPromptId String?
  params          Json?     // Store generation parameters as JSON

  // Relations
  user   User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  images GeneratedImage[]

  @@map("generation_jobs")
}

// Updated model for storing images with dynamic URL construction
model GeneratedImage {
  id          String   @id @default(cuid())
  clerkId     String   // Link to Clerk user
  jobId       String   // Link to generation job
  
  // URL-independent path components
  filename    String   // e.g., "ComfyUI_00001_.png"
  subfolder   String   @default("") // e.g., "" or "subfolder_name"
  type        String   @default("output") // e.g., "output", "input", "temp"
  
  // Metadata
  fileSize    Int?
  width       Int?
  height      Int?
  format      String?  // png, jpg, webp, etc.
  data        Bytes?   // Optional: store actual image data
  metadata    Json?    // Store additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User           @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  job  GenerationJob? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("generated_images")
}

enum SyncStatus {
  PENDING
  SYNCED
  MISSING
  ERROR
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}