// prisma/schema.prisma - Complete with video support and dynamic URL approach
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String?
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  influencers    InfluencerLoRA[]
  jobs           GenerationJob[]
  images         GeneratedImage[]
  videos         GeneratedVideo[]
  trainingJobs   TrainingJob[]
  trainingImages TrainingImage[] // Added training images relation

  @@map("users")
}

model InfluencerLoRA {
  id               String     @id @default(cuid())
  clerkId          String     // Link to Clerk user
  name             String
  displayName      String
  fileName         String     @unique
  originalFileName String
  fileSize         Int
  uploadedAt       DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  description        String?
  thumbnailUrl       String?
  cloudinaryUrl      String?    // Cloudinary storage URL
  cloudinaryPublicId String?    // Cloudinary public ID for management
  // blobUrl          String?    // Vercel Blob storage URL - temporarily disabled
  isActive           Boolean    @default(true)
  usageCount       Int        @default(0)
  comfyUIPath      String?
  syncStatus       SyncStatus @default(PENDING)
  lastUsedAt       DateTime?
  trainingJobId    String?    // Optional link to training job that created this LoRA

  // Relations
  user        User         @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  trainingJob TrainingJob? @relation(fields: [trainingJobId], references: [id], onDelete: SetNull)

  @@index([clerkId])
  @@index([fileName])
  @@index([isActive])
  @@index([trainingJobId])
  @@map("influencer_loras")
}

model GenerationJob {
  id              String      @id @default(cuid())
  clerkId         String      // Link to Clerk user
  status          JobStatus   @default(PENDING)
  progress        Int?        @default(0)
  resultUrls      String[]    @default([]) // Keep for backward compatibility temporarily
  error           String?
  type            GenerationType @default(TEXT_TO_IMAGE) // Added generation type
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastChecked     DateTime?
  comfyUIPromptId String?
  params          Json?       // Store generation parameters as JSON

  // Relations
  user   User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  images GeneratedImage[]
  videos GeneratedVideo[] // Added video relation

  @@index([clerkId])
  @@index([status])
  @@index([type]) // Added index for generation type
  @@index([createdAt])
  @@index([clerkId, createdAt])
  @@index([clerkId, status])
  @@index([clerkId, type])
  @@map("generation_jobs")
}

// Updated model for storing images with dynamic URL construction
model GeneratedImage {
  id          String   @id @default(cuid())
  clerkId     String   // Link to Clerk user
  jobId       String   // Link to generation job
  
  // URL-independent path components
  filename    String   // e.g., "ComfyUI_00001_.png"
  subfolder   String   @default("") // e.g., "" or "subfolder_name"
  type        String   @default("output") // e.g., "output", "input", "temp"
  
  // Metadata
  fileSize    Int?
  width       Int?
  height      Int?
  format      String?  // png, jpg, webp, etc.
  data        Bytes?   // Optional: store actual image data
  metadata    Json?    // Store additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User           @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  job  GenerationJob? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([clerkId])
  @@index([jobId])
  @@index([clerkId, createdAt])
  @@index([format])
  @@index([filename])
  @@unique([jobId, filename, subfolder, type]) // Prevent duplicates
  @@map("generated_images")
}

// New model for storing videos with dynamic URL construction
model GeneratedVideo {
  id          String   @id @default(cuid())
  clerkId     String   // Link to Clerk user
  jobId       String   // Link to generation job
  
  // URL-independent path components
  filename    String   // e.g., "video_00001_.mp4"
  subfolder   String   @default("") // e.g., "" or "video/ComfyUI/wan2.2"
  type        String   @default("output") // e.g., "output", "input", "temp"
  
  // Video-specific metadata
  fileSize    Int?     // File size in bytes
  width       Int?     // Video width in pixels
  height      Int?     // Video height in pixels
  duration    Float?   // Duration in seconds
  fps         Float?   // Frames per second
  format      String?  // mp4, webm, avi, mov, gif, etc.
  data        Bytes?   // Optional: store actual video data
  metadata    Json?    // Store additional metadata (codec, bitrate, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User           @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  job  GenerationJob? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([clerkId])
  @@index([jobId])
  @@index([clerkId, createdAt])
  @@index([format])
  @@index([filename])
  @@index([duration]) // For sorting by duration
  @@index([fileSize]) // For sorting by size
  @@unique([jobId, filename, subfolder, type]) // Prevent duplicates
  @@map("generated_videos")
}

// New model for LoRA training jobs
model TrainingJob {
  id              String            @id @default(cuid())
  clerkId         String            // Link to Clerk user
  name            String            // Training job name
  description     String?           // Optional description
  status          TrainingStatus    @default(PENDING)
  progress        Int?              @default(0) // Progress percentage (0-100)
  currentStep     Int?              @default(0) // Current training step
  totalSteps      Int?              // Total training steps
  runpodJobId     String?           // RunPod job ID
  runpodPodId     String?           // RunPod pod ID
  
  // Configuration and data
  trainingConfig  Json              // Training configuration (network, train params, etc.)
  datasetConfig   Json              // Dataset configuration
  modelConfig     Json              // Base model configuration
  sampleConfig    Json              // Sample generation configuration
  
  // Results and outputs
  error           String?           // Error message if failed
  loss            Float?            // Current/final training loss
  learningRate    Float?            // Current learning rate
  eta             String?           // Estimated time remaining
  sampleUrls      String[]          @default([]) // URLs to sample images
  checkpointUrls  String[]          @default([]) // URLs to saved checkpoints
  finalModelUrl   String?           // URL to final trained model
  logUrl          String?           // URL to training logs
  
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  startedAt       DateTime?         // When training actually started
  completedAt     DateTime?         // When training completed
  
  // Relations
  user            User              @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  resultingLoRAs  InfluencerLoRA[]  // LoRAs created from this training job
  trainingImages  TrainingImage[]   // Images used for training
  
  @@index([clerkId])
  @@index([status])
  @@index([clerkId, status])
  @@index([createdAt])
  @@index([runpodJobId])
  @@map("training_jobs")
}

// Model for storing training dataset images
model TrainingImage {
  id            String      @id @default(cuid())
  clerkId       String      // Link to Clerk user
  trainingJobId String      // Link to training job
  filename      String      // Original filename
  caption       String?     // Optional caption for the image
  fileSize      Int?        // File size in bytes
  width         Int?        // Image width
  height        Int?        // Image height
  format        String?     // Image format (jpg, png, etc.)
  storageUrl    String      // URL where image is stored (for RunPod access)
  localPath     String?     // Local path on RunPod instance
  uploadedAt    DateTime    @default(now())
  
  // Relations
  user        User        @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  trainingJob TrainingJob @relation(fields: [trainingJobId], references: [id], onDelete: Cascade)
  
  @@index([trainingJobId])
  @@index([clerkId])
  @@unique([trainingJobId, filename]) // Prevent duplicate filenames per job
  @@map("training_images")
}

enum SyncStatus {
  PENDING
  SYNCED
  MISSING
  ERROR
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Training job status enum
enum TrainingStatus {
  PENDING      // Job created but not started
  QUEUED       // Job queued on RunPod
  INITIALIZING // Setting up training environment
  PROCESSING   // Training in progress
  SAMPLING     // Generating sample images
  SAVING       // Saving checkpoints/final model
  COMPLETED    // Training completed successfully
  FAILED       // Training failed
  CANCELLED    // Training was cancelled
  TIMEOUT      // Training timed out
}

// New enum for generation types
enum GenerationType {
  TEXT_TO_IMAGE
  IMAGE_TO_VIDEO
  IMAGE_TO_IMAGE
  TEXT_TO_VIDEO
  VIDEO_TO_VIDEO
}