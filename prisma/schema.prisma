generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  clerkId        String           @unique
  email          String?
  firstName      String?
  lastName       String?
  imageUrl       String?
  role           UserRole         @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  images         GeneratedImage[]
  videos         GeneratedVideo[]
  jobs           GenerationJob[]
  influencers    InfluencerLoRA[]
  trainingImages TrainingImage[]
  trainingJobs   TrainingJob[]
  productionEntries ProductionEntry[]

  @@map("users")
}

model InfluencerLoRA {
  id                 String       @id @default(cuid())
  clerkId            String
  name               String
  displayName        String
  fileName           String       @unique
  originalFileName   String
  fileSize           Int
  uploadedAt         DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  description        String?
  thumbnailUrl       String?
  cloudinaryUrl      String?
  cloudinaryPublicId String?
  isActive           Boolean      @default(true)
  usageCount         Int          @default(0)
  comfyUIPath        String?
  syncStatus         SyncStatus   @default(PENDING)
  lastUsedAt         DateTime?
  trainingJobId      String?
  user               User         @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  trainingJob        TrainingJob? @relation(fields: [trainingJobId], references: [id])

  @@index([clerkId])
  @@index([fileName])
  @@index([isActive])
  @@index([trainingJobId])
  @@map("influencer_loras")
}

model GenerationJob {
  id                     String           @id @default(cuid())
  clerkId                String
  status                 JobStatus        @default(PENDING)
  progress               Int?             @default(0)
  resultUrls             String[]         @default([])
  error                  String?
  type                   GenerationType   @default(TEXT_TO_IMAGE)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  lastChecked            DateTime?
  comfyUIPromptId        String?
  params                 Json?
  stage                  String?
  message                String?
  elapsedTime            Int?
  estimatedTimeRemaining Int?
  images                 GeneratedImage[]
  videos                 GeneratedVideo[]
  user                   User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@index([clerkId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([clerkId, createdAt])
  @@index([clerkId, status])
  @@index([clerkId, type])
  @@map("generation_jobs")
}

model GeneratedImage {
  id                    String        @id @default(cuid())
  clerkId               String
  jobId                 String
  filename              String
  subfolder             String        @default("")
  type                  String        @default("output")
  fileSize              Int?
  width                 Int?
  height                Int?
  format                String?
  data                  Bytes?
  networkVolumePath     String?       // Path to image on network volume (/runpod-volume/outputs/{userId}/...)
  s3Key                 String?       // S3 key for network volume storage (outputs/{userId}/...)
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  user                  User          @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  job                   GenerationJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, filename, subfolder, type])
  @@index([clerkId])
  @@index([jobId])
  @@index([clerkId, createdAt])
  @@index([format])
  @@index([filename])
  @@index([networkVolumePath])
  @@index([s3Key])
  @@map("generated_images")
}

model GeneratedVideo {
  id        String        @id @default(cuid())
  clerkId   String
  jobId     String
  filename  String
  subfolder String        @default("")
  type      String        @default("output")
  fileSize  Int?
  width     Int?
  height    Int?
  duration  Float?
  fps       Float?
  format    String?
  data      Bytes?
  metadata  Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  job       GenerationJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, filename, subfolder, type])
  @@index([clerkId])
  @@index([jobId])
  @@index([clerkId, createdAt])
  @@index([format])
  @@index([filename])
  @@index([duration])
  @@index([fileSize])
  @@map("generated_videos")
}

model TrainingJob {
  id             String           @id @default(cuid())
  clerkId        String
  name           String
  description    String?
  status         TrainingStatus   @default(PENDING)
  progress       Int?             @default(0)
  currentStep    Int?             @default(0)
  totalSteps     Int?
  runpodJobId    String?
  runpodPodId    String?
  trainingConfig Json
  datasetConfig  Json
  modelConfig    Json
  sampleConfig   Json
  error          String?
  loss           Float?
  learningRate   Float?
  eta            String?
  sampleUrls     String[]         @default([])
  checkpointUrls String[]         @default([])
  finalModelUrl  String?
  logUrl         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  startedAt      DateTime?
  completedAt    DateTime?
  resultingLoRAs InfluencerLoRA[]
  trainingImages TrainingImage[]
  user           User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@index([clerkId])
  @@index([status])
  @@index([clerkId, status])
  @@index([createdAt])
  @@index([runpodJobId])
  @@map("training_jobs")
}

model TrainingImage {
  id            String      @id @default(cuid())
  clerkId       String
  trainingJobId String
  filename      String
  caption       String?
  fileSize      Int?
  width         Int?
  height        Int?
  format        String?
  storageUrl    String
  localPath     String?
  uploadedAt    DateTime    @default(now())
  user          User        @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  trainingJob   TrainingJob @relation(fields: [trainingJobId], references: [id], onDelete: Cascade)

  @@unique([trainingJobId, filename])
  @@index([trainingJobId])
  @@index([clerkId])
  @@map("training_images")
}

model ProductionEntry {
  id              String           @id @default(cuid())
  clerkId         String
  deadline        DateTime
  assignee        String
  influencer      String
  instagramSource String
  loraModel       String
  status          ProductionStatus @default(PENDING)
  imagesTarget    Int              @default(0)
  imagesGenerated Int              @default(0)
  videosTarget    Int              @default(0)
  videosGenerated Int              @default(0)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

  @@index([clerkId])
  @@index([status])
  @@index([deadline])
  @@index([assignee])
  @@map("production_entries")
}

enum SyncStatus {
  PENDING
  SYNCED
  MISSING
  ERROR
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TrainingStatus {
  PENDING
  QUEUED
  INITIALIZING
  PROCESSING
  SAMPLING
  SAVING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

enum GenerationType {
  TEXT_TO_IMAGE
  IMAGE_TO_VIDEO
  IMAGE_TO_IMAGE
  TEXT_TO_VIDEO
  VIDEO_TO_VIDEO
  SKIN_ENHANCEMENT
  FACE_SWAP
}

enum UserRole {
  USER
  MANAGER
  ADMIN
}

enum ProductionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
